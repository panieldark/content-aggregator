"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./src/pages/_app.tsx":
/*!****************************!*\
  !*** ./src/pages/_app.tsx ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @chakra-ui/react */ \"./node_modules/@chakra-ui/react/dist/index.esm.js\");\n/* harmony import */ var _theme__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../theme */ \"./src/theme.tsx\");\n/* harmony import */ var urql__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! urql */ \"./node_modules/urql/dist/urql.es.js\");\n/* harmony import */ var _urql_exchange_graphcache__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @urql/exchange-graphcache */ \"./node_modules/@urql/exchange-graphcache/dist/urql-exchange-graphcache.mjs\");\n\n\n\n\n\nconst client = (0,urql__WEBPACK_IMPORTED_MODULE_2__.createClient)({\n    url: \"http://localhost:4000/graphql\",\n    fetchOptions: {\n        credentials: \"include\"\n    },\n    exchange: [\n        urql__WEBPACK_IMPORTED_MODULE_2__.dedupExchange,\n        (0,_urql_exchange_graphcache__WEBPACK_IMPORTED_MODULE_3__.cacheExchange)(),\n        urql__WEBPACK_IMPORTED_MODULE_2__.fetchExchange\n    ]\n});\nfunction MyApp(param) {\n    let { Component , pageProps  } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(urql__WEBPACK_IMPORTED_MODULE_2__.Provider, {\n        value: client,\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_4__.ChakraProvider, {\n            theme: _theme__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Component, {\n                ...pageProps\n            }, void 0, false, {\n                fileName: \"/Users/daniel.park/Dev/content-aggregator/web/src/pages/_app.tsx\",\n                lineNumber: 18,\n                columnNumber: 11\n            }, this)\n        }, void 0, false, {\n            fileName: \"/Users/daniel.park/Dev/content-aggregator/web/src/pages/_app.tsx\",\n            lineNumber: 17,\n            columnNumber: 9\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/daniel.park/Dev/content-aggregator/web/src/pages/_app.tsx\",\n        lineNumber: 16,\n        columnNumber: 7\n    }, this);\n}\n_c = MyApp;\n/* harmony default export */ __webpack_exports__[\"default\"] = (MyApp);\nvar _c;\n$RefreshReg$(_c, \"MyApp\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGFnZXMvX2FwcC50c3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQWlEO0FBRXJCO0FBRThDO0FBQ2xCO0FBRXhELE1BQU1PLFNBQVNMLGtEQUFZQSxDQUFDO0lBQUNNLEtBQUs7SUFDOUJDLGNBQWM7UUFDVkMsYUFBYTtJQUNyQjtJQUFHQyxVQUFVO1FBQUNSLCtDQUFhQTtRQUFFRyx3RUFBYUE7UUFBSUYsK0NBQWFBO0tBQUM7QUFDNUQ7QUFFQSxTQUFTUSxNQUFNLEtBQWtDLEVBQUU7UUFBcEMsRUFBRUMsVUFBUyxFQUFFQyxVQUFTLEVBQVksR0FBbEM7SUFDYixxQkFDSSw4REFBQ1QsMENBQVFBO1FBQUNVLE9BQU9SO2tCQUNmLDRFQUFDUCw0REFBY0E7WUFBQ0MsT0FBT0EsOENBQUtBO3NCQUMxQiw0RUFBQ1k7Z0JBQVcsR0FBR0MsU0FBUzs7Ozs7Ozs7Ozs7Ozs7OztBQUlsQztLQVJTRjtBQVVULCtEQUFlQSxLQUFLQSxFQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9wYWdlcy9fYXBwLnRzeD9mOWQ2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYWtyYVByb3ZpZGVyIH0gZnJvbSAnQGNoYWtyYS11aS9yZWFjdCdcblxuaW1wb3J0IHRoZW1lIGZyb20gJy4uL3RoZW1lJ1xuaW1wb3J0IHsgQXBwUHJvcHMgfSBmcm9tICduZXh0L2FwcCdcbmltcG9ydCB7Y3JlYXRlQ2xpZW50LCBkZWR1cEV4Y2hhbmdlLCBmZXRjaEV4Y2hhbmdlLCBQcm92aWRlcn0gZnJvbSBcInVycWxcIjtcbmltcG9ydCB7Y2FjaGVFeGNoYW5nZX0gZnJvbSBcIkB1cnFsL2V4Y2hhbmdlLWdyYXBoY2FjaGVcIjtcblxuY29uc3QgY2xpZW50ID0gY3JlYXRlQ2xpZW50KHt1cmw6IFwiaHR0cDovL2xvY2FsaG9zdDo0MDAwL2dyYXBocWxcIixcbiAgICBmZXRjaE9wdGlvbnM6IHtcbiAgICAgICAgY3JlZGVudGlhbHM6IFwiaW5jbHVkZVwiXG59LCBleGNoYW5nZTogW2RlZHVwRXhjaGFuZ2UsIGNhY2hlRXhjaGFuZ2UoKSwgZmV0Y2hFeGNoYW5nZV1cbn0pXG5cbmZ1bmN0aW9uIE15QXBwKHsgQ29tcG9uZW50LCBwYWdlUHJvcHMgfTogQXBwUHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICAgIDxQcm92aWRlciB2YWx1ZT17Y2xpZW50fT5cbiAgICAgICAgPENoYWtyYVByb3ZpZGVyIHRoZW1lPXt0aGVtZX0+XG4gICAgICAgICAgPENvbXBvbmVudCB7Li4ucGFnZVByb3BzfSAvPlxuICAgICAgICA8L0NoYWtyYVByb3ZpZGVyPlxuICAgICAgPC9Qcm92aWRlcj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBNeUFwcFxuIl0sIm5hbWVzIjpbIkNoYWtyYVByb3ZpZGVyIiwidGhlbWUiLCJjcmVhdGVDbGllbnQiLCJkZWR1cEV4Y2hhbmdlIiwiZmV0Y2hFeGNoYW5nZSIsIlByb3ZpZGVyIiwiY2FjaGVFeGNoYW5nZSIsImNsaWVudCIsInVybCIsImZldGNoT3B0aW9ucyIsImNyZWRlbnRpYWxzIiwiZXhjaGFuZ2UiLCJNeUFwcCIsIkNvbXBvbmVudCIsInBhZ2VQcm9wcyIsInZhbHVlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/pages/_app.tsx\n"));

/***/ }),

/***/ "./node_modules/@urql/exchange-graphcache/dist/urql-exchange-graphcache.mjs":
/*!**********************************************************************************!*\
  !*** ./node_modules/@urql/exchange-graphcache/dist/urql-exchange-graphcache.mjs ***!
  \**********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Store\": function() { return /* binding */ Store; },\n/* harmony export */   \"cacheExchange\": function() { return /* binding */ cacheExchange; },\n/* harmony export */   \"offlineExchange\": function() { return /* binding */ offlineExchange; },\n/* harmony export */   \"query\": function() { return /* binding */ query; },\n/* harmony export */   \"write\": function() { return /* binding */ write; }\n/* harmony export */ });\n/* harmony import */ var _urql_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @urql/core */ \"./node_modules/@urql/core/dist/urql-core.mjs\");\n/* harmony import */ var wonka__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! wonka */ \"./node_modules/wonka/dist/wonka.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql */ \"./node_modules/graphql/index.mjs\");\n\n\n\n\n\n\nvar getName = e => e.name.value;\n\nvar getFragmentTypeName = e => e.typeCondition.name.value;\n\nvar getFieldAlias = e => e.alias ? e.alias.value : e.name.value;\n\nvar y = [];\n\nvar getSelectionSet = e => e.selectionSet ? e.selectionSet.selections : y;\n\nvar getTypeCondition = e => e.typeCondition ? e.typeCondition.name.value : null;\n\nvar isFieldNode = e => e.kind === graphql__WEBPACK_IMPORTED_MODULE_0__.Kind.FIELD;\n\nvar isInlineFragment = e => e.kind === graphql__WEBPACK_IMPORTED_MODULE_0__.Kind.INLINE_FRAGMENT;\n\nvar getFieldArguments = (e, r) => {\n  var t = null;\n  if (e.arguments) {\n    for (var i = 0, a = e.arguments.length; i < a; i++) {\n      var n = e.arguments[i];\n      var o = (0,graphql__WEBPACK_IMPORTED_MODULE_0__.valueFromASTUntyped)(n.value, r);\n      if (null != o) {\n        if (!t) {\n          t = {};\n        }\n        t[getName(n)] = o;\n      }\n    }\n  }\n  return t;\n};\n\nvar filterVariables = (e, r) => {\n  if (!r || !e.variableDefinitions) {\n    return;\n  }\n  var t = {};\n  for (var i = 0, a = e.variableDefinitions.length; i < a; i++) {\n    var n = getName(e.variableDefinitions[i].variable);\n    t[n] = r[n];\n  }\n  return t;\n};\n\nvar normalizeVariables = (e, r) => {\n  var t = {};\n  if (!r) {\n    return t;\n  }\n  if (e.variableDefinitions) {\n    for (var i = 0, a = e.variableDefinitions.length; i < a; i++) {\n      var n = e.variableDefinitions[i];\n      var o = getName(n.variable);\n      t[o] = void 0 === r[o] && n.defaultValue ? (0,graphql__WEBPACK_IMPORTED_MODULE_0__.valueFromASTUntyped)(n.defaultValue, r) : r[o];\n    }\n  }\n  for (var s in r) {\n    if (!(s in t)) {\n      t[s] = r[s];\n    }\n  }\n  return t;\n};\n\nvar h = \"\\nhttps://bit.ly/2XbVrpR#\";\n\nvar m = new Set;\n\nvar g = [];\n\nvar popDebugNode = () => g.pop();\n\nvar pushDebugNode = (e, r) => {\n  var t = \"\";\n  if (r.kind === graphql__WEBPACK_IMPORTED_MODULE_0__.Kind.INLINE_FRAGMENT) {\n    t = e ? `Inline Fragment on \"${e}\"` : \"Inline Fragment\";\n  } else if (r.kind === graphql__WEBPACK_IMPORTED_MODULE_0__.Kind.OPERATION_DEFINITION) {\n    t = `${r.name ? `\"${r.name.value}\"` : \"Unnamed\"} ${r.operation}`;\n  } else if (r.kind === graphql__WEBPACK_IMPORTED_MODULE_0__.Kind.FRAGMENT_DEFINITION) {\n    t = `\"${r.name.value}\" Fragment`;\n  }\n  if (t) {\n    g.push(t);\n  }\n};\n\nvar getDebugOutput = () => g.length ? \"\\n(Caused At: \" + g.join(\", \") + \")\" : \"\";\n\nfunction invariant(e, r, t) {\n  if (!e) {\n    var i = r || \"Minfied Error #\" + t + \"\\n\";\n    if (true) {\n      i += getDebugOutput();\n    }\n    var a = new Error(i + h + t);\n    a.name = \"Graphcache Error\";\n    throw a;\n  }\n}\n\nfunction warn(e, r) {\n  if (!m.has(e)) {\n    console.warn(e + getDebugOutput() + h + r);\n    m.add(e);\n  }\n}\n\nvar getMainOperation = e => {\n  for (var r = 0; r < e.definitions.length; r++) {\n    if (e.definitions[r].kind === graphql__WEBPACK_IMPORTED_MODULE_0__.Kind.OPERATION_DEFINITION) {\n      return e.definitions[r];\n    }\n  }\n  invariant(!1,  true ? \"Invalid GraphQL document: All GraphQL documents must contain an OperationDefinitionnode for a query, subscription, or mutation.\" : 0, 1);\n};\n\nvar getFragments = e => {\n  var r = {};\n  for (var t = 0; t < e.definitions.length; t++) {\n    var i = e.definitions[t];\n    if (i.kind === graphql__WEBPACK_IMPORTED_MODULE_0__.Kind.FRAGMENT_DEFINITION) {\n      r[getName(i)] = i;\n    }\n  }\n  return r;\n};\n\nvar shouldInclude = (e, r) => {\n  for (var t = 0; e.directives && t < e.directives.length; t++) {\n    var i = e.directives[t];\n    var a = getName(i);\n    if ((\"include\" === a || \"skip\" === a) && i.arguments && i.arguments[0] && \"if\" === getName(i.arguments[0])) {\n      var n = (0,graphql__WEBPACK_IMPORTED_MODULE_0__.valueFromASTUntyped)(i.arguments[0].value, r);\n      return \"include\" === a ? !!n : !n;\n    }\n  }\n  return !0;\n};\n\nvar isDeferred = (e, r) => {\n  for (var t = 0; e.directives && t < e.directives.length; t++) {\n    var i = e.directives[t];\n    if (\"defer\" === getName(i)) {\n      for (var a = 0; i.arguments && a < i.arguments.length; a++) {\n        var n = i.arguments[t];\n        if (\"if\" === getName(n)) {\n          return !!(0,graphql__WEBPACK_IMPORTED_MODULE_0__.valueFromASTUntyped)(n.value, r);\n        }\n      }\n      return !0;\n    }\n  }\n  return !1;\n};\n\nvar isFieldNullable = (e, r, t) => {\n  var i = getField(e, r, t);\n  return !!i && \"NON_NULL\" !== i.type.kind;\n};\n\nvar isListNullable = (e, r, t) => {\n  var i = getField(e, r, t);\n  if (!i) {\n    return !1;\n  }\n  var a = \"NON_NULL\" === i.type.kind ? i.type.ofType : i.type;\n  return \"LIST\" === a.kind && \"NON_NULL\" !== a.ofType.kind;\n};\n\nvar isFieldAvailableOnType = (e, r, t) => 0 === t.indexOf(\"__\") || 0 === r.indexOf(\"__\") || !!getField(e, r, t);\n\nvar isInterfaceOfType = (e, r, t) => {\n  if (!t) {\n    return !1;\n  }\n  var i = getTypeCondition(r);\n  if (!i || t === i) {\n    return !0;\n  } else if (e.types.has(i) && \"OBJECT\" === e.types.get(i).kind) {\n    return i === t;\n  }\n  !function expectAbstractType(e, r) {\n    invariant(e.types.has(r) && (\"INTERFACE\" === e.types.get(r).kind || \"UNION\" === e.types.get(r).kind),  true ? \"Invalid Abstract type: The type `\" + r + \"` is not an Interface or Union type in the defined schema, but a fragment in the GraphQL document is using it as a type condition.\" : 0, 5);\n  }(e, i);\n  expectObjectType(e, t);\n  return e.isSubType(i, t);\n};\n\nvar getField = (e, r, t) => {\n  if (0 === t.indexOf(\"__\") || 0 === r.indexOf(\"__\")) {\n    return;\n  }\n  expectObjectType(e, r);\n  var i = e.types.get(r).fields()[t];\n  if (true) {\n    if (!i) {\n      warn(\"Invalid field: The field `\" + t + \"` does not exist on `\" + r + \"`, but the GraphQL document expects it to exist.\\nTraversal will continue, however this may lead to undefined behavior!\", 4);\n    }\n  }\n  return i;\n};\n\nfunction expectObjectType(e, r) {\n  invariant(e.types.has(r) && \"OBJECT\" === e.types.get(r).kind,  true ? \"Invalid Object type: The type `\" + r + \"` is not an object in the defined schema, but the GraphQL document is traversing it.\" : 0, 3);\n}\n\nfunction warnAboutResolver(e) {\n   true && warn(`Invalid resolver: \\`${e}\\` is not in the defined schema, but the \\`resolvers\\` option is referencing it.`, 23);\n}\n\nvar keyOfField = (r, t) => t ? `${r}(${(0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.stringifyVariables)(t)})` : r;\n\nvar joinKeys = (e, r) => `${e}.${r}`;\n\nvar fieldInfoOfKey = e => {\n  var r = e.indexOf(\"(\");\n  if (r > -1) {\n    return {\n      fieldKey: e,\n      fieldName: e.slice(0, r),\n      arguments: JSON.parse(e.slice(r + 1, -1))\n    };\n  } else {\n    return {\n      fieldKey: e,\n      fieldName: e,\n      arguments: null\n    };\n  }\n};\n\nvar deserializeKeyInfo = e => {\n  var r = e.indexOf(\".\");\n  return {\n    entityKey: e.slice(0, r).replace(/%2e/g, \".\"),\n    fieldKey: e.slice(r + 1)\n  };\n};\n\nvar makeDict = () => Object.create(null);\n\nvar _ = null;\n\nvar N = null;\n\nvar k = null;\n\nvar E = null;\n\nvar O = null;\n\nvar w = null;\n\nvar b = !1;\n\nvar makeData = e => {\n  var r;\n  if (e) {\n    if (_.has(e)) {\n      return e;\n    }\n    r = N.get(e) || {\n      ...e\n    };\n    N.set(e, r);\n  } else {\n    r = {};\n  }\n  _.add(r);\n  return r;\n};\n\nvar ownsData = e => !!e && _.has(e);\n\nvar initDataState = (e, r, t, i) => {\n  _ = new WeakSet;\n  N = new WeakMap;\n  k = e;\n  E = r;\n  O = new Set;\n  b = !!i;\n  if (true) {\n    g.length = 0;\n  }\n  if (!t) {\n    w = null;\n  } else if (\"read\" === k) {\n    w = t;\n  } else if (i || r.optimisticOrder.length > 1) {\n    if (!i && !r.commutativeKeys.has(t)) {\n      reserveLayer(r, t);\n    } else if (i) {\n      if (-1 !== r.optimisticOrder.indexOf(t) && !r.commutativeKeys.has(t)) {\n        r.optimisticOrder.splice(r.optimisticOrder.indexOf(t), 1);\n      }\n      r.commutativeKeys.delete(t);\n    }\n    w = t;\n    createLayer(r, t);\n  } else {\n    w = null;\n    deleteLayer(r, t);\n  }\n};\n\nvar clearDataState = () => {\n  if (true) {\n    getCurrentDependencies();\n  }\n  var e = E;\n  var r = w;\n  b = !1;\n  w = null;\n  if (r && e.optimisticOrder.indexOf(r) > -1) {\n    var t = e.optimisticOrder.length;\n    while (--t >= 0 && e.refLock.has(e.optimisticOrder[t]) && e.commutativeKeys.has(e.optimisticOrder[t]) && !e.deferredKeys.has(e.optimisticOrder[t])) {\n      squashLayer(e.optimisticOrder[t]);\n    }\n  }\n  _ = null;\n  N = null;\n  k = null;\n  E = null;\n  O = null;\n  if (true) {\n    g.length = 0;\n  }\n  if ( true && !e.defer) {\n    e.defer = !0;\n    setTimeout((() => {\n      initDataState(\"read\", e, null);\n      gc();\n      persistData();\n      clearDataState();\n      e.defer = !1;\n    }));\n  }\n};\n\nvar noopDataState = (e, r, t) => {\n  if (r && !t) {\n    e.deferredKeys.delete(r);\n  }\n  initDataState(\"write\", e, r, t);\n  clearDataState();\n};\n\nvar getCurrentOperation = () => {\n  invariant(null !== k,  true ? \"Invalid Cache call: The cache may only be accessed or mutated duringoperations like write or query, or as part of its resolvers, updaters, or optimistic configs.\" : 0, 2);\n  return k;\n};\n\nvar getCurrentDependencies = () => {\n  invariant(null !== O,  true ? \"Invalid Cache call: The cache may only be accessed or mutated duringoperations like write or query, or as part of its resolvers, updaters, or optimistic configs.\" : 0, 2);\n  return O;\n};\n\nvar setNode = (e, r, t, i) => {\n  var a = w ? e.optimistic.get(w) : e.base;\n  var n = a.get(r);\n  if (void 0 === n) {\n    a.set(r, n = makeDict());\n  }\n  if (void 0 === i && !w) {\n    delete n[t];\n  } else {\n    n[t] = i;\n  }\n};\n\nvar getNode = (e, r, t) => {\n  var i;\n  var a = !b && \"read\" === k && w && E.commutativeKeys.has(w);\n  for (var n = 0, o = E.optimisticOrder.length; n < o; n++) {\n    var s = E.optimisticOrder[n];\n    var v = e.optimistic.get(s);\n    a = a && s !== w;\n    if (v && (!a || !E.commutativeKeys.has(s)) && (!b || \"write\" === k || E.commutativeKeys.has(s)) && void 0 !== (i = v.get(r)) && t in i) {\n      return i[t];\n    }\n  }\n  return void 0 !== (i = e.base.get(r)) ? i[t] : void 0;\n};\n\nvar updateRCForEntity = (e, r, t, i) => {\n  var a = r.get(t) || 0;\n  var n = a + i;\n  r.set(t, n);\n  if (e) {\n    if (n <= 0) {\n      e.add(t);\n    } else if (a <= 0 && n > 0) {\n      e.delete(t);\n    }\n  }\n};\n\nvar updateRCForLink = (e, r, t, i) => {\n  if (\"string\" == typeof t) {\n    updateRCForEntity(e, r, t, i);\n  } else if (Array.isArray(t)) {\n    for (var a = 0, n = t.length; a < n; a++) {\n      if (Array.isArray(t[a])) {\n        updateRCForLink(e, r, t[a], i);\n      } else if (t[a]) {\n        updateRCForEntity(e, r, t[a], i);\n      }\n    }\n  }\n};\n\nvar extractNodeFields = (e, r, t) => {\n  if (void 0 !== t) {\n    for (var i in t) {\n      if (!r.has(i)) {\n        e.push(fieldInfoOfKey(i));\n        r.add(i);\n      }\n    }\n  }\n};\n\nvar extractNodeMapFields = (e, r, t, i) => {\n  extractNodeFields(e, r, i.base.get(t));\n  for (var a = 0, n = E.optimisticOrder.length; a < n; a++) {\n    var o = i.optimistic.get(E.optimisticOrder[a]);\n    if (void 0 !== o) {\n      extractNodeFields(e, r, o.get(t));\n    }\n  }\n};\n\nvar gc = () => {\n  var {gc: e} = E;\n  for (var r of e.keys()) {\n    if ((E.refCount.get(r) || 0) > 0) {\n      e.delete(r);\n      return;\n    }\n    for (var t of E.refLock.keys()) {\n      var i = E.refLock.get(t);\n      if (i) {\n        if ((i.get(r) || 0) > 0) {\n          return;\n        }\n        i.delete(r);\n      }\n    }\n    E.refCount.delete(r);\n    e.delete(r);\n    E.records.base.delete(r);\n    var a = E.links.base.get(r);\n    if (a) {\n      E.links.base.delete(r);\n      for (var n in a) {\n        updateRCForLink(e, E.refCount, a[n], -1);\n      }\n    }\n  }\n};\n\nvar updateDependencies = (e, r) => {\n  if (\"__typename\" !== r) {\n    if (e !== E.queryRootKey) {\n      O.add(e);\n    } else if (void 0 !== r) {\n      O.add(joinKeys(e, r));\n    }\n  }\n};\n\nvar updatePersist = (e, r) => {\n  if (!b && E.storage) {\n    E.persist.add(((e, r) => `${e.replace(/\\./g, \"%2e\")}.${r}`)(e, r));\n  }\n};\n\nvar readRecord = (e, r) => {\n  updateDependencies(e, r);\n  return getNode(E.records, e, r);\n};\n\nvar readLink = (e, r) => {\n  updateDependencies(e, r);\n  return getNode(E.links, e, r);\n};\n\nvar writeRecord = (e, r, t) => {\n  updateDependencies(e, r);\n  updatePersist(e, r);\n  setNode(E.records, e, r, t);\n};\n\nvar writeLink = (e, r, t) => {\n  var i = E;\n  var a;\n  var n;\n  var o;\n  if (w) {\n    if (!(a = i.refLock.get(w))) {\n      i.refLock.set(w, a = new Map);\n    }\n    n = i.links.optimistic.get(w);\n  } else {\n    a = i.refCount;\n    n = i.links.base;\n    o = i.gc;\n  }\n  var s = n && n.get(e);\n  var v = s && s[r];\n  updateDependencies(e, r);\n  updatePersist(e, r);\n  setNode(i.links, e, r, t);\n  updateRCForLink(o, a, v, -1);\n  updateRCForLink(o, a, t, 1);\n};\n\nvar reserveLayer = (e, r, t) => {\n  if (t) {\n    e.deferredKeys.add(r);\n  } else {\n    e.deferredKeys.delete(r);\n  }\n  var i = e.optimisticOrder.indexOf(r);\n  if (i > -1) {\n    if (!e.commutativeKeys.has(r) && !t) {\n      e.optimisticOrder.splice(i, 1);\n      clearLayer(e, r);\n    } else {\n      return;\n    }\n  }\n  for (i = 0; t && i < e.optimisticOrder.length && !e.deferredKeys.has(e.optimisticOrder[i]) && (!e.refLock.has(e.optimisticOrder[i]) || !e.commutativeKeys.has(e.optimisticOrder[i])); i++) {}\n  e.optimisticOrder.splice(i, 0, r);\n  e.commutativeKeys.add(r);\n};\n\nvar createLayer = (e, r) => {\n  if (-1 === e.optimisticOrder.indexOf(r)) {\n    e.optimisticOrder.unshift(r);\n  }\n  if (!e.refLock.has(r)) {\n    e.refLock.set(r, new Map);\n    e.links.optimistic.set(r, new Map);\n    e.records.optimistic.set(r, new Map);\n  }\n};\n\nvar clearLayer = (e, r) => {\n  if (e.refLock.has(r)) {\n    e.refLock.delete(r);\n    e.records.optimistic.delete(r);\n    e.links.optimistic.delete(r);\n    e.deferredKeys.delete(r);\n  }\n};\n\nvar deleteLayer = (e, r) => {\n  var t = e.optimisticOrder.indexOf(r);\n  if (t > -1) {\n    e.optimisticOrder.splice(t, 1);\n    e.commutativeKeys.delete(r);\n  }\n  clearLayer(e, r);\n};\n\nvar squashLayer = e => {\n  var r = O;\n  O = new Set;\n  var t = E.links.optimistic.get(e);\n  if (t) {\n    for (var i of t.entries()) {\n      var a = i[0];\n      var n = i[1];\n      for (var o in n) {\n        writeLink(a, o, n[o]);\n      }\n    }\n  }\n  var s = E.records.optimistic.get(e);\n  if (s) {\n    for (var v of s.entries()) {\n      var l = v[0];\n      var u = v[1];\n      for (var d in u) {\n        writeRecord(l, d, u[d]);\n      }\n    }\n  }\n  O = r;\n  deleteLayer(E, e);\n};\n\nvar inspectFields = e => {\n  var {links: r, records: t} = E;\n  var i = [];\n  var a = new Set;\n  updateDependencies(e);\n  extractNodeMapFields(i, a, e, r);\n  extractNodeMapFields(i, a, e, t);\n  return i;\n};\n\nvar persistData = () => {\n  if (E.storage) {\n    b = !0;\n    k = \"read\";\n    var r = makeDict();\n    for (var t of E.persist.keys()) {\n      var {entityKey: i, fieldKey: a} = deserializeKeyInfo(t);\n      var n = void 0;\n      if (void 0 !== (n = readLink(i, a))) {\n        r[t] = `:${(0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.stringifyVariables)(n)}`;\n      } else if (void 0 !== (n = readRecord(i, a))) {\n        r[t] = (0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.stringifyVariables)(n);\n      } else {\n        r[t] = void 0;\n      }\n    }\n    b = !1;\n    E.storage.writeData(r);\n    E.persist.clear();\n  }\n};\n\nvar D = {\n  current: null\n};\n\nvar q = {\n  current: !1\n};\n\nvar getFieldError = e => e.__internal.path.length > 0 && e.__internal.errorMap ? e.__internal.errorMap[e.__internal.path.join(\".\")] : void 0;\n\nvar makeContext = (e, r, t, i, a, n, o) => {\n  var s = {\n    store: e,\n    variables: r,\n    fragments: t,\n    parent: {\n      __typename: i\n    },\n    parentTypeName: i,\n    parentKey: a,\n    parentFieldKey: \"\",\n    fieldName: \"\",\n    error: void 0,\n    partial: !1,\n    optimistic: !!n,\n    __internal: {\n      path: [],\n      errorMap: void 0\n    }\n  };\n  if (o && o.graphQLErrors) {\n    for (var v = 0; v < o.graphQLErrors.length; v++) {\n      var l = o.graphQLErrors[v];\n      if (l.path && l.path.length) {\n        if (!s.__internal.errorMap) {\n          s.__internal.errorMap = Object.create(null);\n        }\n        s.__internal.errorMap[l.path.join(\".\")] = l;\n      }\n    }\n  }\n  return s;\n};\n\nvar updateContext = (e, r, t, i, a, n) => {\n  D.current = e;\n  e.parent = r;\n  e.parentTypeName = t;\n  e.parentKey = i;\n  e.parentFieldKey = a;\n  e.fieldName = n;\n  e.error = getFieldError(e);\n};\n\nvar isFragmentHeuristicallyMatching = (e, r, t, i) => {\n  if (!r) {\n    return !1;\n  }\n  var a = getTypeCondition(e);\n  if (!a || r === a) {\n    return !0;\n  }\n   true && warn(\"Heuristic Fragment Matching: A fragment is trying to match against the `\" + r + \"` type, but the type condition is `\" + a + \"`. Since GraphQL allows for interfaces `\" + a + \"` may be aninterface.\\nA schema needs to be defined for this match to be deterministic, otherwise the fragment will be matched heuristically!\", 16);\n  return \"write\" === k || !getSelectionSet(e).some((e => {\n    if (!isFieldNode(e)) {\n      return !1;\n    }\n    var r = keyOfField(getName(e), getFieldArguments(e, i));\n    return !((e, r) => void 0 !== readRecord(e, r) || void 0 !== readLink(e, r))(t, r);\n  }));\n};\n\nvar makeSelectionIterator = (e, r, t, i) => {\n  var a = !1;\n  var n;\n  var o = 0;\n  return function next() {\n    if (!q.current && a) {\n      q.current = a;\n    }\n    if (n) {\n      var s = n();\n      if (null != s) {\n        return s;\n      }\n      n = void 0;\n      a = !1;\n      if (true) {\n        popDebugNode();\n      }\n    }\n    while (o < t.length) {\n      var v = t[o++];\n      if (!shouldInclude(v, i.variables)) {\n        continue;\n      } else if (!isFieldNode(v)) {\n        var l = !isInlineFragment(v) ? i.fragments[getName(v)] : v;\n        if (void 0 !== l) {\n          if (i.store.schema ? isInterfaceOfType(i.store.schema, l, e) : isFragmentHeuristicallyMatching(l, e, r, i.variables)) {\n            if (true) {\n              pushDebugNode(e, l);\n            }\n            a = !!isDeferred(v, i.variables);\n            if (!q.current && a) {\n              q.current = a;\n            }\n            return (n = makeSelectionIterator(e, r, getSelectionSet(l), i))();\n          }\n        }\n      } else {\n        return v;\n      }\n    }\n  };\n};\n\nvar ensureData = e => null == e ? null : e;\n\nvar ensureLink = (e, r) => {\n  if (null == r) {\n    return r;\n  } else if (Array.isArray(r)) {\n    var t = new Array(r.length);\n    for (var i = 0, a = t.length; i < a; i++) {\n      t[i] = ensureLink(e, r[i]);\n    }\n    return t;\n  }\n  var n = e.keyOfEntity(r);\n  if (true) {\n    if (!n && r && \"object\" == typeof r) {\n      warn(\"Can't generate a key for link(...) item.\\nYou have to pass an `id` or `_id` field or create a custom `keys` config for `\" + r.__typename + \"`.\", 12);\n    }\n  }\n  return n;\n};\n\nvar write = (e, r, t, i, a) => {\n  initDataState(\"write\", e.data, a || null);\n  var n = startWrite(e, r, t, i);\n  clearDataState();\n  return n;\n};\n\nvar startWrite = (e, r, t, i, a) => {\n  var n = getMainOperation(r.query);\n  var o = {\n    data: t,\n    dependencies: getCurrentDependencies()\n  };\n  var s = e.rootFields[n.operation];\n  var v = makeContext(e, normalizeVariables(n, r.variables), getFragments(r.query), s, s, !!a, i);\n  if (true) {\n    pushDebugNode(s, n);\n  }\n  writeSelection(v, s, getSelectionSet(n), t);\n  if (true) {\n    popDebugNode();\n  }\n  return o;\n};\n\nvar writeSelection = (e, r, t, i) => {\n  var a = r === e.store.rootFields.query;\n  var n = !a && !!e.store.rootNames[r];\n  var o = n || a ? r : i.__typename;\n  if (!o) {\n     true && warn(\"Couldn't find __typename when writing.\\nIf you're writing to the cache manually have to pass a `__typename` property on each entity in your data.\", 14);\n    return;\n  } else if (!n && !a && r) {\n    writeRecord(r, \"__typename\", o);\n  }\n  var s = makeSelectionIterator(o, r || o, t, e);\n  var v;\n  while (v = s()) {\n    var l = getName(v);\n    var u = getFieldArguments(v, e.variables);\n    var d = keyOfField(l, u);\n    var p = getFieldAlias(v);\n    var c = i[e.optimistic ? l : p];\n    if (true) {\n      if (!n && void 0 === c && !q.current && !e.optimistic) {\n         true && warn(\"Invalid undefined: The field at `\" + d + \"` is `undefined`, but the GraphQL query expects a \" + (void 0 === v.selectionSet ? \"scalar (number, boolean, etc)\" : \"selection set\") + \" for this field.\", 13);\n        continue;\n      } else if (e.store.schema && o && \"__typename\" !== l) {\n        isFieldAvailableOnType(e.store.schema, o, l);\n      }\n    }\n    if (\"__typename\" === l || void 0 === c && (q.current || e.optimistic && !n)) {\n      continue;\n    }\n    e.__internal.path.push(p);\n    var f = void 0;\n    if (e.optimistic && n) {\n      if (!(f = e.store.optimisticMutations[l])) {\n        continue;\n      }\n    } else if (e.optimistic && \"function\" == typeof c) {\n      f = c;\n    }\n    if (f) {\n      updateContext(e, i, o, o, d, l);\n      c = ensureData(f(u || {}, e.store, e));\n    }\n    if (v.selectionSet) {\n      if (r && !n) {\n        var y = joinKeys(r, d);\n        var h = writeField(e, getSelectionSet(v), ensureData(c), y);\n        writeLink(r || o, d, h);\n      } else {\n        writeField(e, getSelectionSet(v), ensureData(c));\n      }\n    } else if (r && !n) {\n      writeRecord(r || o, d, null !== c || !getFieldError(e) ? c : void 0);\n    }\n    if (n) {\n      var m = e.store.updates[o][l];\n      if (m) {\n        updateContext(e, i, o, o, joinKeys(o, d), l);\n        i[l] = c;\n        m(i, u || {}, e.store, e);\n      }\n    }\n    e.__internal.path.pop();\n  }\n};\n\nvar V = /^__|PageInfo|(Connection|Edge)$/;\n\nvar writeField = (e, r, t, i) => {\n  if (Array.isArray(t)) {\n    var a = new Array(t.length);\n    for (var n = 0, o = t.length; n < o; n++) {\n      e.__internal.path.push(n);\n      var s = i ? joinKeys(i, `${n}`) : void 0;\n      var v = writeField(e, r, t[n], s);\n      a[n] = v;\n      e.__internal.path.pop();\n    }\n    return a;\n  } else if (null === t) {\n    return getFieldError(e) ? void 0 : null;\n  }\n  var l = e.store.keyOfEntity(t);\n  var u = t.__typename;\n  if (true) {\n    if (i && !e.store.keys[t.__typename] && null === l && \"string\" == typeof u && !V.test(u)) {\n      warn(\"Invalid key: The GraphQL query at the field at `\" + i + \"` has a selection set, but no key could be generated for the data at this field.\\nYou have to request `id` or `_id` fields for all selection sets or create a custom `keys` config for `\" + u + \"`.\\nEntities without keys will be embedded directly on the parent entity. If this is intentional, create a `keys` config for `\" + u + \"` that always returns null.\", 15);\n    }\n  }\n  var d = l || i;\n  writeSelection(e, d, r, t);\n  return d || null;\n};\n\nclass Store {\n  constructor(e) {\n    Store.prototype.__init.call(this);\n    Store.prototype.__init2.call(this);\n    if (!e) {\n      e = {};\n    }\n    this.resolvers = e.resolvers || {};\n    this.optimisticMutations = e.optimistic || {};\n    this.keys = e.keys || {};\n    var r = \"Query\";\n    var t = \"Mutation\";\n    var i = \"Subscription\";\n    if (e.schema) {\n      var a = (({__schema: e}) => {\n        var r = new Map;\n        var buildNameMap = e => {\n          var r;\n          return () => {\n            if (!r) {\n              r = {};\n              for (var t = 0; t < e.length; t++) {\n                r[e[t].name] = e[t];\n              }\n            }\n            return r;\n          };\n        };\n        var buildType = e => {\n          switch (e.kind) {\n           case \"OBJECT\":\n           case \"INTERFACE\":\n            return {\n              name: e.name,\n              kind: e.kind,\n              interfaces: buildNameMap(e.interfaces || []),\n              fields: buildNameMap(e.fields.map((e => ({\n                name: e.name,\n                type: e.type,\n                args: buildNameMap(e.args)\n              }))))\n            };\n\n           case \"UNION\":\n            return {\n              name: e.name,\n              kind: e.kind,\n              types: buildNameMap(e.possibleTypes || [])\n            };\n          }\n        };\n        var t = {\n          query: e.queryType ? e.queryType.name : null,\n          mutation: e.mutationType ? e.mutationType.name : null,\n          subscription: e.subscriptionType ? e.subscriptionType.name : null,\n          types: void 0,\n          isSubType(e, t) {\n            var i = r.get(e);\n            var a = r.get(t);\n            if (!i || !a) {\n              return !1;\n            } else if (\"UNION\" === i.kind) {\n              return !!i.types()[t];\n            } else if (\"OBJECT\" !== i.kind && \"OBJECT\" === a.kind) {\n              return !!a.interfaces()[e];\n            } else {\n              return e === t;\n            }\n          }\n        };\n        if (e.types) {\n          t.types = r;\n          for (var i = 0; i < e.types.length; i++) {\n            var a = e.types[i];\n            if (a && a.name) {\n              var n = buildType(a);\n              if (n) {\n                r.set(a.name, n);\n              }\n            }\n          }\n        }\n        return t;\n      })(e.schema);\n      r = a.query || r;\n      t = a.mutation || t;\n      i = a.subscription || i;\n      if (a.types) {\n        this.schema = a;\n      }\n    }\n    this.updates = {\n      [t]: e.updates && e.updates.Mutation || {},\n      [i]: e.updates && e.updates.Subscription || {}\n    };\n    this.rootFields = {\n      query: r,\n      mutation: t,\n      subscription: i\n    };\n    this.rootNames = {\n      [r]: \"query\",\n      [t]: \"mutation\",\n      [i]: \"subscription\"\n    };\n    this.data = (n = r, {\n      defer: !1,\n      gc: new Set,\n      persist: new Set,\n      queryRootKey: n,\n      refCount: new Map,\n      refLock: new Map,\n      links: {\n        optimistic: new Map,\n        base: new Map\n      },\n      records: {\n        optimistic: new Map,\n        base: new Map\n      },\n      deferredKeys: new Set,\n      commutativeKeys: new Set,\n      optimisticOrder: [],\n      storage: null\n    });\n    var n;\n    if (this.schema && \"production\" !== \"development\") {\n      !function expectValidKeyingConfig(e, r) {\n        if (true) {\n          for (var t in r) {\n            if (true) {\n              if (!e.types.has(t)) {\n                warn(\"Invalid Object type: The type `\" + t + \"` is not an object in the defined schema, but the `keys` option is referencing it.\", 20);\n              }\n            }\n          }\n        }\n      }(this.schema, this.keys);\n      !function expectValidUpdatesConfig(e, r) {\n        if (false) {}\n        if (e.mutation) {\n          var t = e.types.get(e.mutation).fields();\n          var i = r[e.mutation] || {};\n          for (var a in i) {\n            if (true) {\n              if (void 0 === t[a]) {\n                warn(\"Invalid mutation field: `\" + a + \"` is not in the defined schema, but the `updates.Mutation` option is referencing it.\", 21);\n              }\n            }\n          }\n        }\n        if (e.subscription) {\n          var n = e.types.get(e.subscription).fields();\n          var o = r[e.subscription] || {};\n          for (var s in o) {\n            if (true) {\n              if (void 0 === n[s]) {\n                warn(\"Invalid subscription field: `\" + s + \"` is not in the defined schema, but the `updates.Subscription` option is referencing it.\", 22);\n              }\n            }\n          }\n        }\n      }(this.schema, this.updates);\n      !function expectValidResolversConfig(e, r) {\n        if (false) {}\n        for (var t in r) {\n          if (\"Query\" === t) {\n            if (e.query) {\n              var i = e.types.get(e.query).fields();\n              for (var a in r.Query) {\n                if (!i[a]) {\n                  warnAboutResolver(\"Query.\" + a);\n                }\n              }\n            } else {\n              warnAboutResolver(\"Query\");\n            }\n          } else if (!e.types.has(t)) {\n            warnAboutResolver(t);\n          } else if (\"INTERFACE\" === e.types.get(t).kind || \"UNION\" === e.types.get(t).kind) {\n            s = t, v = e.types.get(t).kind,  true && warn(`Invalid resolver: \\`${s}\\` does not match to a concrete type in the schema, but the \\`resolvers\\` option is referencing it. Implement the resolver for the types that ${\"UNION\" === v ? \"make up the union\" : \"implement the interface\"} instead.`, 26);\n          } else {\n            var n = e.types.get(t).fields();\n            for (var o in r[t]) {\n              if (!n[o]) {\n                warnAboutResolver(t + \".\" + o);\n              }\n            }\n          }\n        }\n        var s, v;\n      }(this.schema, this.resolvers);\n      !function expectValidOptimisticMutationsConfig(e, r) {\n        if (false) {}\n        if (e.mutation) {\n          var t = e.types.get(e.mutation).fields();\n          for (var i in r) {\n            if (true) {\n              if (!t[i]) {\n                warn(`Invalid optimistic mutation field: \\`${i}\\` is not a mutation field in the defined schema, but the \\`optimistic\\` option is referencing it.`, 24);\n              }\n            }\n          }\n        }\n      }(this.schema, this.optimisticMutations);\n    }\n  }\n  __init() {\n    this.keyOfField = keyOfField;\n  }\n  keyOfEntity(e) {\n    if (D.current && e === D.current.parent) {\n      return D.current.parentKey;\n    }\n    if (null == e || \"string\" == typeof e) {\n      return e || null;\n    }\n    if (!e.__typename) {\n      return null;\n    }\n    if (this.rootNames[e.__typename]) {\n      return e.__typename;\n    }\n    var r;\n    if (this.keys[e.__typename]) {\n      r = this.keys[e.__typename](e);\n    } else if (null != e.id) {\n      r = `${e.id}`;\n    } else if (null != e._id) {\n      r = `${e._id}`;\n    }\n    return r ? `${e.__typename}:${r}` : null;\n  }\n  resolve(e, r, t) {\n    var i = keyOfField(r, t);\n    var a = this.keyOfEntity(e);\n    if (!a) {\n      return null;\n    }\n    var n = readRecord(a, i);\n    if (void 0 !== n) {\n      return n;\n    }\n    return readLink(a, i) || null;\n  }\n  __init2() {\n    this.resolveFieldByKey = this.resolve;\n  }\n  invalidate(e, r, t) {\n    var i = this.keyOfEntity(e);\n    invariant(i,  true ? \"Can't generate a key for invalidate(...).\\nYou have to pass an id or _id field or create a custom `keys` field for `\" + typeof e == \"object\" ? e.__typename : e + \"`.\" : 0, 19);\n    ((e, r, t) => {\n      var i = r ? [ {\n        fieldKey: keyOfField(r, t)\n      } ] : inspectFields(e);\n      for (var a = 0, n = i.length; a < n; a++) {\n        var {fieldKey: o} = i[a];\n        if (void 0 !== readLink(e, o)) {\n          writeLink(e, o, void 0);\n        } else {\n          writeRecord(e, o, void 0);\n        }\n      }\n    })(i, r, t);\n  }\n  inspectFields(e) {\n    var r = this.keyOfEntity(e);\n    return r ? inspectFields(r) : [];\n  }\n  updateQuery(e, i) {\n    var a = (0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.createRequest)(e.query, e.variables);\n    a.query = (0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.formatDocument)(a.query);\n    var n = i(this.readQuery(a));\n    if (null !== n) {\n      startWrite(this, a, n);\n    }\n  }\n  readQuery(e) {\n    var i = (0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.createRequest)(e.query, e.variables);\n    i.query = (0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.formatDocument)(i.query);\n    return read(this, i).data;\n  }\n  readFragment(e, r, i, a) {\n    return readFragment(this, (0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.formatDocument)(e), r, i, a);\n  }\n  writeFragment(e, r, i, a) {\n    ((e, r, t, i, a) => {\n      var n = getFragments(r);\n      var o;\n      if (a) {\n        if (!(o = n[a])) {\n           true && warn(\"writeFragment(...) was called with a fragment name that does not exist.\\nYou provided \" + a + \" but could only find \" + Object.keys(n).join(\", \") + \".\", 11);\n          return null;\n        }\n      } else if (!(o = n[Object.keys(n)[0]])) {\n         true && warn(\"writeFragment(...) was called with an empty fragment.\\nYou have to call it with at least one fragment in your GraphQL document.\", 11);\n        return null;\n      }\n      var s = getFragmentTypeName(o);\n      var v = {\n        __typename: s,\n        ...t\n      };\n      var l = e.keyOfEntity(v);\n      if (!l) {\n        return  true ? warn(\"Can't generate a key for writeFragment(...) data.\\nYou have to pass an `id` or `_id` field or create a custom `keys` config for `\" + s + \"`.\", 12) : 0;\n      }\n      if (true) {\n        pushDebugNode(s, o);\n      }\n      var u = makeContext(e, i || {}, n, s, l, void 0);\n      writeSelection(u, l, getSelectionSet(o), v);\n      if (true) {\n        popDebugNode();\n      }\n    })(this, (0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.formatDocument)(e), r, i, a);\n  }\n  link(e, r, t, i) {\n    var a = void 0 !== i ? t : null;\n    var n = void 0 !== i ? i : t;\n    var o = ensureLink(this, e);\n    if (\"string\" == typeof o) {\n      writeLink(o, keyOfField(r, a), ensureLink(this, n));\n    }\n  }\n}\n\nvar query = (e, r, t, i, a) => {\n  initDataState(\"read\", e.data, a);\n  var n = read(e, r, t, i);\n  clearDataState();\n  return n;\n};\n\nvar read = (e, r, t, i) => {\n  var a = getMainOperation(r.query);\n  var n = e.rootFields[a.operation];\n  var o = getSelectionSet(a);\n  var s = makeContext(e, normalizeVariables(a, r.variables), getFragments(r.query), n, n, !1, i);\n  if (true) {\n    pushDebugNode(n, a);\n  }\n  if (!t) {\n    t = makeData();\n  }\n  var v = n !== s.store.rootFields.query ? readRoot(s, n, o, t) : readSelection(s, n, o, t);\n  if (true) {\n    popDebugNode();\n  }\n  return {\n    dependencies: getCurrentDependencies(),\n    partial: s.partial || !v,\n    data: v || null\n  };\n};\n\nvar readRoot = (e, r, t, i) => {\n  if (\"string\" != typeof (e.store.rootNames[r] ? r : i.__typename)) {\n    return i;\n  }\n  var a = makeSelectionIterator(r, r, t, e);\n  var n;\n  var o = !1;\n  var s = makeData(i);\n  while (n = a()) {\n    var v = getFieldAlias(n);\n    var l = i[v];\n    e.__internal.path.push(v);\n    var u = void 0;\n    if (n.selectionSet && null !== l) {\n      u = readRootField(e, getSelectionSet(n), ensureData(l));\n    } else {\n      u = l;\n    }\n    o = o || u !== l;\n    if (void 0 !== u) {\n      s[v] = u;\n    }\n    e.__internal.path.pop();\n  }\n  return o ? s : i;\n};\n\nvar readRootField = (e, r, t) => {\n  if (Array.isArray(t)) {\n    var i = new Array(t.length);\n    var a = !1;\n    for (var n = 0, o = t.length; n < o; n++) {\n      e.__internal.path.push(n);\n      i[n] = readRootField(e, r, t[n]);\n      a = a || i[n] !== t[n];\n      e.__internal.path.pop();\n    }\n    return a ? i : t;\n  } else if (null === t) {\n    return null;\n  }\n  var s = e.store.keyOfEntity(t);\n  if (null !== s) {\n    return readSelection(e, s, r, t) || null;\n  } else {\n    return readRoot(e, t.__typename, r, t);\n  }\n};\n\nvar readFragment = (e, r, t, i, a) => {\n  var n = getFragments(r);\n  var o;\n  if (a) {\n    if (!(o = n[a])) {\n       true && warn(\"readFragment(...) was called with a fragment name that does not exist.\\nYou provided \" + a + \" but could only find \" + Object.keys(n).join(\", \") + \".\", 6);\n      return null;\n    }\n  } else {\n    if (!(o = n[Object.keys(n)[0]])) {\n       true && warn(\"readFragment(...) was called with an empty fragment.\\nYou have to call it with at least one fragment in your GraphQL document.\", 6);\n      return null;\n    }\n  }\n  var s = getFragmentTypeName(o);\n  if (\"string\" != typeof t && !t.__typename) {\n    t.__typename = s;\n  }\n  var v = e.keyOfEntity(t);\n  if (!v) {\n     true && warn(\"Can't generate a key for readFragment(...).\\nYou have to pass an `id` or `_id` field or create a custom `keys` config for `\" + s + \"`.\", 7);\n    return null;\n  }\n  if (true) {\n    pushDebugNode(s, o);\n  }\n  var l = makeContext(e, i || {}, n, s, v);\n  var u = readSelection(l, v, getSelectionSet(o), makeData()) || null;\n  if (true) {\n    popDebugNode();\n  }\n  return u;\n};\n\nvar readSelection = (e, r, t, i, a) => {\n  var {store: n} = e;\n  var o = r === n.rootFields.query;\n  var s = a && n.keyOfEntity(a) || r;\n  if (true) {\n    if (!o && e.store.rootNames[s]) {\n      warn(\"Invalid root traversal: A selection was being read on `\" + s + \"` which is an uncached root type.\\nThe `\" + e.store.rootFields.mutation + \"` and `\" + e.store.rootFields.subscription + \"` types are special Operation Root Types and cannot be read back from the cache.\", 25);\n    }\n  }\n  var v = !o ? readRecord(s, \"__typename\") || a && a.__typename : r;\n  if (\"string\" != typeof v) {\n    return;\n  } else if (a && v !== a.__typename) {\n     true && warn(\"Invalid resolver data: The resolver at `\" + s + \"` returned an invalid typename that could not be reconciled with the cache.\", 8);\n    return;\n  }\n  var l = makeSelectionIterator(v, s, t, e);\n  var u = !1;\n  var d = !1;\n  var p = v !== i.__typename;\n  var c;\n  var f = makeData(i);\n  while (void 0 !== (c = l())) {\n    var y = getName(c);\n    var h = getFieldArguments(c, e.variables);\n    var m = getFieldAlias(c);\n    var g = keyOfField(y, h);\n    var _ = joinKeys(s, g);\n    var N = readRecord(s, g);\n    var k = a ? a[y] : void 0;\n    var E = n.resolvers[v];\n    if ( true && n.schema && v) {\n      isFieldAvailableOnType(n.schema, v, y);\n    }\n    e.__internal.path.push(m);\n    var O = void 0;\n    if (\"__typename\" === y) {\n      O = v;\n    } else if (void 0 !== k && void 0 === c.selectionSet) {\n      O = k;\n    } else if (\"read\" === getCurrentOperation() && E && \"function\" == typeof E[y]) {\n      updateContext(e, f, v, s, _, y);\n      if (void 0 !== N) {\n        f[m] = N;\n      }\n      O = E[y](f, h || {}, n, e);\n      if (c.selectionSet) {\n        O = resolveResolverResult(e, v, y, _, getSelectionSet(c), void 0 !== f[m] ? f[m] : i[m], O, ownsData(i));\n      }\n      if (n.schema && null === O && !isFieldNullable(n.schema, v, y)) {\n        return;\n      }\n    } else if (!c.selectionSet) {\n      O = N;\n    } else if (void 0 !== k) {\n      O = resolveResolverResult(e, v, y, _, getSelectionSet(c), void 0 !== f[m] ? f[m] : i[m], k, ownsData(i));\n    } else {\n      var w = readLink(s, g);\n      if (void 0 !== w) {\n        O = resolveLink(e, w, v, y, getSelectionSet(c), void 0 !== f[m] ? f[m] : i[m], ownsData(i));\n      } else if (\"object\" == typeof N && null !== N) {\n        O = N;\n      }\n    }\n    if (void 0 === O && q.current) {\n      u = !0;\n    } else if (void 0 === O && (n.schema && isFieldNullable(n.schema, v, y) || getFieldError(e))) {\n      d = !0;\n      O = null;\n    } else if (void 0 === O) {\n      e.__internal.path.pop();\n      return;\n    } else {\n      u = u || \"__typename\" !== y;\n    }\n    e.__internal.path.pop();\n    p = p || O !== i[m];\n    if (void 0 !== O) {\n      f[m] = O;\n    }\n  }\n  e.partial = e.partial || d;\n  return o && d && !u ? void 0 : p ? f : i;\n};\n\nvar resolveResolverResult = (e, r, t, i, a, n, o, s) => {\n  if (Array.isArray(o)) {\n    var {store: v} = e;\n    var l = v.schema ? isListNullable(v.schema, r, t) : !1;\n    var u = new Array(o.length);\n    var d = !Array.isArray(n) || o.length !== n.length;\n    for (var p = 0, c = o.length; p < c; p++) {\n      e.__internal.path.push(p);\n      var f = resolveResolverResult(e, r, t, joinKeys(i, `${p}`), a, null != n ? n[p] : void 0, o[p], s);\n      e.__internal.path.pop();\n      if (void 0 === f && !l) {\n        return;\n      } else {\n        e.partial = e.partial || void 0 === f && l;\n        u[p] = null != f ? f : null;\n        d = d || u[p] !== n[p];\n      }\n    }\n    return d ? u : n;\n  } else if (null == o) {\n    return o;\n  } else if (s && null === n) {\n    return null;\n  } else if (isDataOrKey(o)) {\n    var y = n || makeData();\n    return \"string\" == typeof o ? readSelection(e, o, a, y) : readSelection(e, i, a, y, o);\n  } else {\n     true && warn(\"Invalid resolver value: The field at `\" + i + \"` is a scalar (number, boolean, etc), but the GraphQL query expects a selection set for this field.\", 9);\n    return;\n  }\n};\n\nvar resolveLink = (e, r, t, i, a, n, o) => {\n  if (Array.isArray(r)) {\n    var {store: s} = e;\n    var v = s.schema ? isListNullable(s.schema, t, i) : !1;\n    var l = new Array(r.length);\n    var u = !Array.isArray(n) || l.length !== n.length;\n    for (var d = 0, p = r.length; d < p; d++) {\n      e.__internal.path.push(d);\n      var c = resolveLink(e, r[d], t, i, a, null != n ? n[d] : void 0, o);\n      e.__internal.path.pop();\n      if (void 0 === c && !v) {\n        return;\n      } else {\n        e.partial = e.partial || void 0 === c && v;\n        l[d] = c || null;\n        u = u || l[d] !== n[d];\n      }\n    }\n    return u ? l : n;\n  } else if (null === r || null === n && o) {\n    return null;\n  }\n  return readSelection(e, r, a, n || makeData());\n};\n\nvar isDataOrKey = e => \"string\" == typeof e || \"object\" == typeof e && \"string\" == typeof e.__typename;\n\nvar addCacheOutcome = (e, r) => (0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.makeOperation)(e.kind, e, {\n  ...e.context,\n  meta: {\n    ...e.context.meta,\n    cacheOutcome: r\n  }\n});\n\nvar toRequestPolicy = (e, r) => (0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.makeOperation)(e.kind, e, {\n  ...e.context,\n  requestPolicy: r\n});\n\nvar cacheExchange = e => ({forward: r, client: d, dispatchDebug: p}) => {\n  var c = new Store(e);\n  if (e && e.storage) {\n    e.storage.readData().then((r => {\n      ((e, r, t) => {\n        initDataState(\"write\", e, null);\n        for (var i in t) {\n          var a = t[i];\n          if (void 0 !== a) {\n            var {entityKey: n, fieldKey: o} = deserializeKeyInfo(i);\n            if (\":\" === a[0]) {\n              if (void 0 === readLink(n, o)) {\n                writeLink(n, o, JSON.parse(a.slice(1)));\n              }\n            } else if (void 0 === readRecord(n, o)) {\n              writeRecord(n, o, JSON.parse(a));\n            }\n          }\n        }\n        clearDataState();\n        e.storage = r;\n      })(c.data, e.storage, r);\n    }));\n  }\n  var f = new Map;\n  var y = [];\n  var h = new Map;\n  var m = new Map;\n  var g = new Set;\n  var _ = new Set;\n  var N = new Map;\n  var k = new Set;\n  var E = new Set;\n  var isBlockedByOptimisticUpdate = e => {\n    for (var r of e.values()) {\n      if (g.has(r)) {\n        return !0;\n      }\n    }\n    return !1;\n  };\n  var collectPendingOperations = (e, r) => {\n    if (r) {\n      for (var t of r.values()) {\n        var i = N.get(t);\n        if (i) {\n          for (var a of i.values()) {\n            e.add(a);\n          }\n        }\n      }\n    }\n  };\n  var executePendingOperations = (e, r) => {\n    for (var t of r.values()) {\n      if (t !== e.key) {\n        var i = h.get(t);\n        if (i) {\n          if (\"query\" === e.kind) {\n            E.add(t);\n          }\n          h.delete(t);\n          var a = \"cache-first\";\n          if (_.has(t)) {\n            _.delete(t);\n            a = \"cache-and-network\";\n          }\n          d.reexecuteOperation(toRequestPolicy(i, a));\n        }\n      }\n    }\n    var n = k;\n    if (\"query\" === e.kind) {\n      (k = E).add(e.key);\n    }\n    (E = n).clear();\n  };\n  var prepareForwardedOperation = e => {\n    if (\"query\" === e.kind) {\n      reserveLayer(c.data, e.key);\n    } else if (\"teardown\" === e.kind) {\n      h.delete(e.key);\n      m.delete(e.key);\n      noopDataState(c.data, e.key);\n    } else if (\"mutation\" === e.kind && \"network-only\" !== e.context.requestPolicy) {\n      var {dependencies: r} = ((e, r, t) => {\n        if (true) {\n          invariant(\"mutation\" === getMainOperation(r.query).operation,  true ? \"writeOptimistic(...) was called with an operation that is not a mutation.\\nThis case is unsupported and should never occur.\" : 0, 10);\n        }\n        initDataState(\"write\", e.data, t, !0);\n        var i = startWrite(e, r, {}, void 0, !0);\n        clearDataState();\n        return i;\n      })(c, e, e.key);\n      if (r.size) {\n        for (var a of r.values()) {\n          g.add(a);\n        }\n        f.set(e.key, r);\n        var n = new Set;\n        collectPendingOperations(n, r);\n        executePendingOperations(e, n);\n      }\n    }\n    return (0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.makeOperation)(e.kind, {\n      key: e.key,\n      query: (0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.formatDocument)(e.query),\n      variables: e.variables ? filterVariables(getMainOperation(e.query), e.variables) : e.variables\n    }, e.context);\n  };\n  var updateDependencies = (e, r) => {\n    for (var t of r.values()) {\n      var i = N.get(t);\n      if (!i) {\n        N.set(t, i = new Set);\n      }\n      i.add(e.key);\n    }\n  };\n  var operationResultFromCache = e => {\n    var r = query(c, e, m.get(e.key));\n    var t = r.data ? !r.partial ? \"hit\" : \"partial\" : \"miss\";\n    m.set(e.key, r.data);\n    h.set(e.key, e);\n    updateDependencies(e, r.dependencies);\n    return {\n      outcome: t,\n      operation: e,\n      data: r.data,\n      dependencies: r.dependencies\n    };\n  };\n  var updateCacheWithResult = (e, r) => {\n    var {error: t, extensions: a} = e;\n    var n = h.get(e.operation.key);\n    var o = n ? (0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.makeOperation)(n.kind, n, e.operation.context) : e.operation;\n    if (\"mutation\" === o.kind) {\n      var s = f.get(o.key);\n      collectPendingOperations(r, s);\n      f.delete(o.key);\n    }\n    reserveLayer(c.data, o.key, \"subscription\" === o.kind || e.hasNext);\n    var v;\n    var l = e.data;\n    if (l) {\n      var u = write(c, o, l, e.error, o.key).dependencies;\n      collectPendingOperations(r, u);\n      var d = query(c, o, \"query\" === o.kind ? m.get(o.key) || l : l, e.error, o.key);\n      l = d.data;\n      if (\"query\" === o.kind) {\n        collectPendingOperations(r, v = d.dependencies);\n        m.set(o.key, l);\n      }\n    } else {\n      noopDataState(c.data, o.key);\n    }\n    if (v) {\n      h.set(o.key, o);\n      updateDependencies(e.operation, v);\n    }\n    return {\n      data: l,\n      error: t,\n      extensions: a,\n      operation: o\n    };\n  };\n  return e => {\n    var t = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.share)(e);\n    var i = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.share)((0,wonka__WEBPACK_IMPORTED_MODULE_2__.map)(operationResultFromCache)((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e => \"query\" === e.kind && \"network-only\" !== e.context.requestPolicy))(t)));\n    var h = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e => \"query\" !== e.kind || \"network-only\" === e.context.requestPolicy))(t);\n    var m = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.map)((e => {\n       true && p({\n        type: \"cacheMiss\",\n        message: \"The result could not be retrieved from the cache\",\n        operation: e.operation,\n        source: \"cacheExchange\"\n      });\n      return addCacheOutcome(e.operation, \"miss\");\n    }))((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e => \"miss\" === e.outcome && \"cache-only\" !== e.operation.context.requestPolicy && !isBlockedByOptimisticUpdate(e.dependencies) && !k.has(e.operation.key)))(i));\n    var N = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.map)((e => {\n      var {operation: r, outcome: t, dependencies: i} = e;\n      var a = {\n        operation: addCacheOutcome(r, t),\n        data: e.data,\n        error: e.error,\n        extensions: e.extensions\n      };\n      if (\"cache-and-network\" === r.context.requestPolicy || \"cache-first\" === r.context.requestPolicy && \"partial\" === t) {\n        a.stale = !0;\n        if (!isBlockedByOptimisticUpdate(i)) {\n          d.reexecuteOperation(toRequestPolicy(r, \"network-only\"));\n        } else if (\"cache-and-network\" === r.context.requestPolicy) {\n          _.add(r.key);\n        }\n      }\n       true && p({\n        type: \"cacheHit\",\n        message: \"A requested operation was found and returned from the cache.\",\n        operation: e.operation,\n        data: {\n          value: a\n        },\n        source: \"cacheExchange\"\n      });\n      return a;\n    }))((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e => \"miss\" !== e.outcome || \"cache-only\" === e.operation.context.requestPolicy))(i));\n    var E = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.share)(r((0,wonka__WEBPACK_IMPORTED_MODULE_2__.map)(prepareForwardedOperation)((0,wonka__WEBPACK_IMPORTED_MODULE_2__.merge)([ h, m ]))));\n    var O = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.map)((e => {\n      var r = new Set;\n      var t = updateCacheWithResult(e, r);\n      executePendingOperations(e.operation, r);\n      return t;\n    }))((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e => !f.has(e.operation.key)))(E));\n    var w = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.mergeMap)((e => {\n      if (y.push(e) < f.size) {\n        return wonka__WEBPACK_IMPORTED_MODULE_2__.empty;\n      }\n      for (var r = 0; r < y.length; r++) {\n        reserveLayer(c.data, y[r].operation.key);\n      }\n      g.clear();\n      var t = [];\n      var i = new Set;\n      var a;\n      while (a = y.shift()) {\n        t.push(updateCacheWithResult(a, i));\n      }\n      executePendingOperations(e.operation, i);\n      return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.fromArray)(t);\n    }))((0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e => f.has(e.operation.key)))(E));\n    return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.merge)([ O, w, N ]);\n  };\n};\n\nvar isOfflineError = e => e && e.networkError && !e.response && (\"undefined\" != typeof navigator && !1 === navigator.onLine || /request failed|failed to fetch|network\\s?error/i.test(e.networkError.message));\n\nvar offlineExchange = e => t => {\n  var {storage: n} = e;\n  if (n && n.onOnline && n.readMetadata && n.writeMetadata) {\n    var {forward: v, client: l, dispatchDebug: u} = t;\n    var {source: p, next: c} = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.makeSubject)();\n    var y = e.optimistic || {};\n    var h = [];\n    var updateMetadata = () => {\n      var e = [];\n      for (var r = 0; r < h.length; r++) {\n        var t = h[r];\n        if (\"mutation\" === t.kind) {\n          e.push({\n            query: (0,graphql__WEBPACK_IMPORTED_MODULE_0__.print)(t.query),\n            variables: t.variables\n          });\n        }\n      }\n      n.writeMetadata(e);\n    };\n    var m = !1;\n    var flushQueue = () => {\n      if (!m) {\n        m = !0;\n        for (var e = 0; e < h.length; e++) {\n          var r = h[e];\n          if (\"mutation\" === r.kind) {\n            c((0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.makeOperation)(\"teardown\", r));\n          }\n        }\n        for (var t = 0; t < h.length; t++) {\n          l.reexecuteOperation(h[t]);\n        }\n        h.length = 0;\n        m = !1;\n        updateMetadata();\n      }\n    };\n    n.onOnline(flushQueue);\n    n.readMetadata().then((e => {\n      if (e) {\n        for (var t = 0; t < e.length; t++) {\n          h.push(l.createRequestOperation(\"mutation\", (0,_urql_core__WEBPACK_IMPORTED_MODULE_1__.createRequest)(e[t].query, e[t].variables)));\n        }\n        flushQueue();\n      }\n    }));\n    var g = cacheExchange({\n      ...e,\n      storage: {\n        ...n,\n        readData: () => n.readData().finally(flushQueue)\n      }\n    })({\n      client: l,\n      dispatchDebug: u,\n      forward: e => (0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e => {\n        if (\"mutation\" === e.operation.kind && isOfflineError(e.error) && ((e, r) => {\n          var t = r.variables || {};\n          var i = getFragments(r.query);\n          var a = [ ...getSelectionSet(getMainOperation(r.query)) ];\n          var n;\n          while (n = a.pop()) {\n            if (!shouldInclude(n, t)) {\n              continue;\n            } else if (!isFieldNode(n)) {\n              var o = !isInlineFragment(n) ? i[getName(n)] : n;\n              if (o) {\n                a.push(...getSelectionSet(o));\n              }\n            } else if (e[getName(n)]) {\n              return !0;\n            }\n          }\n          return !1;\n        })(y, e.operation)) {\n          h.push(e.operation);\n          updateMetadata();\n          return !1;\n        }\n        return !0;\n      }))(v(e))\n    });\n    return e => {\n      var r = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.share)(e);\n      var t = (0,wonka__WEBPACK_IMPORTED_MODULE_2__.merge)([ p, r ]);\n      return (0,wonka__WEBPACK_IMPORTED_MODULE_2__.filter)((e => {\n        if (\"query\" === e.operation.kind && isOfflineError(e.error)) {\n          c(toRequestPolicy(e.operation, \"cache-only\"));\n          h.push(e.operation);\n          return !1;\n        }\n        return !0;\n      }))(g(t));\n    };\n  }\n  return cacheExchange(e)(t);\n};\n\n\n//# sourceMappingURL=urql-exchange-graphcache.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@urql/exchange-graphcache/dist/urql-exchange-graphcache.mjs\n"));

/***/ })

});